[gd_resource type="VisualShader" load_steps=23 format=3 uid="uid://dc002tl5nvki8"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7adny"]
input_name = "uv"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ap8ev"]
size = Vector2(880, 760)
expression = "float uvPixelWidth = 1.0 / 80.0;
float uvPixelHeight = 1.0 / 20.0;
float uvSpriteWidth = 1.0 / 8.0;
float uvSpriteHeight = 1.0 / 2.0;

vec2 startingPos = vec2(1.0, 1.0);
float row = floor(disintegration * 8.0);
float col = floor(((disintegration * 8.0) - row) * 8.0);
alpha = 1.0;
float offsetX = floor(uv.x/uvSpriteWidth);
float offsetY = floor(uv.y/uvSpriteHeight);

float currentRow = (floor(uv.y * 20.0) - offsetY * 10.0) - 1.0;
float currentCol = floor(((uv.x - offsetX) / uvSpriteWidth) * 8.0) + 1.0;

alpha = step(offsetY * uvSpriteHeight + 1.0 / 20.0 + row / 20.0, uv.y);
float colFactor = step(currentRow, row);
//colFactor *= smoothstep(1.0, 0.0, .5);

if (uv.x >= offsetX * uvSpriteWidth + (1.0/80.0) + (col) / 80.0) {
	alpha *= 1.0;
} else {
	alpha *= 1.0 - colFactor;
}

//alpha = step(disintegration, 1.0 - noise.r);"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_qgo7x"]
parameter_name = "disintegration_factor"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_w5570"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_u1d81"]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ktgae"]
size = Vector2(620, 400)
expression = "uvMod = uv;
//float uvPixelWidth = 1.0 / 8.0;
float width = 8.0;
float height = 8.0;
float uvWidth = 1.0 / 10.0;
float uvHeight = 1.0 / 2.0;

float uvPixelHeight = 1.0 / 8.0; 
float uvPixelWidth = 1.0 / 10.0;
uvMod.x = round((mod(uv.x, uvWidth)/uvWidth) * width + uvWidth) / width;
uvMod.y = round((mod(uv.y, uvHeight)/uvHeight) * height + uvHeight) / height;"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ookar"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_uvn2w"]
source = 5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_r3105"]
input_name = "texture"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_qy3ae"]
default_input_values = [1, Vector2(1, 1), 2, Vector2(0.75, 0)]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_abc1a"]
size = Vector2(250, 150)

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_f4114"]
parameter_name = "alpha_f"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_jx64j"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_q5r0r"]
input_name = "color"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_0oc60"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(1, 1, 1, 1), 2, Quaternion(0, 0, 0, 0)]
op_type = 5

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_5umq8"]
parameter_name = "ColorParameter"
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_2k40l"]
parameter_name = "emission_f"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_0cxo6"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_ib333"]
parameter_name = "color_factor"
default_value_enabled = true
default_value = 0.5

[sub_resource type="FastNoiseLite" id="FastNoiseLite_jmohc"]
noise_type = 2
frequency = 0.0355

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_cr6mb"]
seamless = true
noise = SubResource("FastNoiseLite_jmohc")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ygnbf"]
texture = SubResource("NoiseTexture2D_cr6mb")
texture_type = 1

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec4 ColorParameter : source_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);
uniform float color_factor = 0.5;
uniform float emission_f = 1;
uniform float disintegration_factor;
uniform sampler2D tex_frg_9 : source_color;
uniform float alpha_f = 1;



void fragment() {
// Input:3
	vec4 n_out3p0 = COLOR;


// ColorParameter:5
	vec4 n_out5p0 = ColorParameter;


// FloatParameter:8
	float n_out8p0 = color_factor;


// Mix:4
	vec4 n_out4p0 = mix(n_out3p0, n_out5p0, vec4(n_out8p0));


// FloatParameter:6
	float n_out6p0 = emission_f;


// VectorOp:7
	vec4 n_out7p0 = n_out4p0 * vec4(n_out6p0);


// VectorDecompose:13
	float n_out13p0 = n_out3p0.x;
	float n_out13p1 = n_out3p0.y;
	float n_out13p2 = n_out3p0.z;
	float n_out13p3 = n_out3p0.w;


// FloatParameter:12
	float n_out12p0 = disintegration_factor;


// Input:10
	vec2 n_out10p0 = UV;


// Input:16
	vec2 n_out16p0 = UV;


	vec2 n_out15p0;
// Expression:15
	n_out15p0 = vec2(0.0, 0.0);
	{
		n_out15p0 = n_out16p0;
		//float uvPixelWidth = 1.0 / 8.0;
		float width = 8.0;
		float height = 8.0;
		float uvWidth = 1.0 / 10.0;
		float uvHeight = 1.0 / 2.0;
		
		float uvPixelHeight = 1.0 / 8.0; 
		float uvPixelWidth = 1.0 / 10.0;
		n_out15p0.x = round((mod(n_out16p0.x, uvWidth)/uvWidth) * width + uvWidth) / width;
		n_out15p0.y = round((mod(n_out16p0.y, uvHeight)/uvHeight) * height + uvHeight) / height;
	}


// Texture2D:9
	vec4 n_out9p0 = texture(tex_frg_9, n_out15p0);


	float n_out11p0;
// Expression:11
	n_out11p0 = 0.0;
	{
		float uvPixelWidth = 1.0 / 80.0;
		float uvPixelHeight = 1.0 / 20.0;
		float uvSpriteWidth = 1.0 / 8.0;
		float uvSpriteHeight = 1.0 / 2.0;
		
		vec2 startingPos = vec2(1.0, 1.0);
		float row = floor(n_out12p0 * 8.0);
		float col = floor(((n_out12p0 * 8.0) - row) * 8.0);
		n_out11p0 = 1.0;
		float offsetX = floor(n_out10p0.x/uvSpriteWidth);
		float offsetY = floor(n_out10p0.y/uvSpriteHeight);
		
		float currentRow = (floor(n_out10p0.y * 20.0) - offsetY * 10.0) - 1.0;
		float currentCol = floor(((n_out10p0.x - offsetX) / uvSpriteWidth) * 8.0) + 1.0;
		
		n_out11p0 = step(offsetY * uvSpriteHeight + 1.0 / 20.0 + row / 20.0, n_out10p0.y);
		float colFactor = step(currentRow, row);
		//colFactor *= smoothstep(1.0, 0.0, .5);
		
		if (n_out10p0.x >= offsetX * uvSpriteWidth + (1.0/80.0) + (col) / 80.0) {
			n_out11p0 *= 1.0;
		} else {
			n_out11p0 *= 1.0 - colFactor;
		}
		
		//n_out11p0 = step(n_out12p0, 1.0 - n_out9p0.r);
	}


// FloatOp:14
	float n_out14p0 = n_out13p3 * n_out11p0;


// FloatParameter:20
	float n_out20p0 = alpha_f;


// FloatOp:21
	float n_out21p0 = n_out14p0 * n_out20p0;


// Output:0
	COLOR.rgb = vec3(n_out7p0.xyz);
	COLOR.a = n_out21p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1560, 480)
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_abc1a")
nodes/fragment/2/position = Vector2(-1320, 320)
nodes/fragment/2/size = Vector2(250, 150)
nodes/fragment/2/input_ports = ""
nodes/fragment/2/output_ports = ""
nodes/fragment/2/expression = ""
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_q5r0r")
nodes/fragment/3/position = Vector2(-860, 100)
nodes/fragment/4/node = SubResource("VisualShaderNodeMix_0oc60")
nodes/fragment/4/position = Vector2(-157.774, 164.043)
nodes/fragment/5/node = SubResource("VisualShaderNodeColorParameter_5umq8")
nodes/fragment/5/position = Vector2(-720, 220)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatParameter_2k40l")
nodes/fragment/6/position = Vector2(-160, 480)
nodes/fragment/7/node = SubResource("VisualShaderNodeVectorOp_0cxo6")
nodes/fragment/7/position = Vector2(220, 280)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatParameter_ib333")
nodes/fragment/8/position = Vector2(-720, 460)
nodes/fragment/9/node = SubResource("VisualShaderNodeTexture_ygnbf")
nodes/fragment/9/position = Vector2(-800, 1360)
nodes/fragment/10/node = SubResource("VisualShaderNodeInput_7adny")
nodes/fragment/10/position = Vector2(-1200, 980)
nodes/fragment/11/node = SubResource("VisualShaderNodeExpression_ap8ev")
nodes/fragment/11/position = Vector2(-420, 860)
nodes/fragment/11/size = Vector2(880, 760)
nodes/fragment/11/input_ports = "0,0,disintegration;1,3,uv;2,5,noise;"
nodes/fragment/11/output_ports = "0,0,alpha;"
nodes/fragment/11/expression = "float uvPixelWidth = 1.0 / 80.0;
float uvPixelHeight = 1.0 / 20.0;
float uvSpriteWidth = 1.0 / 8.0;
float uvSpriteHeight = 1.0 / 2.0;

vec2 startingPos = vec2(1.0, 1.0);
float row = floor(disintegration * 8.0);
float col = floor(((disintegration * 8.0) - row) * 8.0);
alpha = 1.0;
float offsetX = floor(uv.x/uvSpriteWidth);
float offsetY = floor(uv.y/uvSpriteHeight);

float currentRow = (floor(uv.y * 20.0) - offsetY * 10.0) - 1.0;
float currentCol = floor(((uv.x - offsetX) / uvSpriteWidth) * 8.0) + 1.0;

alpha = step(offsetY * uvSpriteHeight + 1.0 / 20.0 + row / 20.0, uv.y);
float colFactor = step(currentRow, row);
//colFactor *= smoothstep(1.0, 0.0, .5);

if (uv.x >= offsetX * uvSpriteWidth + (1.0/80.0) + (col) / 80.0) {
	alpha *= 1.0;
} else {
	alpha *= 1.0 - colFactor;
}

//alpha = step(disintegration, 1.0 - noise.r);"
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatParameter_qgo7x")
nodes/fragment/12/position = Vector2(-1200, 740)
nodes/fragment/13/node = SubResource("VisualShaderNodeVectorDecompose_w5570")
nodes/fragment/13/position = Vector2(540, 680)
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatOp_u1d81")
nodes/fragment/14/position = Vector2(780, 880)
nodes/fragment/15/node = SubResource("VisualShaderNodeExpression_ktgae")
nodes/fragment/15/position = Vector2(-1740, 1180)
nodes/fragment/15/size = Vector2(620, 400)
nodes/fragment/15/input_ports = "0,3,uv;"
nodes/fragment/15/output_ports = "0,3,uvMod;"
nodes/fragment/15/expression = "uvMod = uv;
//float uvPixelWidth = 1.0 / 8.0;
float width = 8.0;
float height = 8.0;
float uvWidth = 1.0 / 10.0;
float uvHeight = 1.0 / 2.0;

float uvPixelHeight = 1.0 / 8.0; 
float uvPixelWidth = 1.0 / 10.0;
uvMod.x = round((mod(uv.x, uvWidth)/uvWidth) * width + uvWidth) / width;
uvMod.y = round((mod(uv.y, uvHeight)/uvHeight) * height + uvHeight) / height;"
nodes/fragment/16/node = SubResource("VisualShaderNodeInput_ookar")
nodes/fragment/16/position = Vector2(-2060, 1180)
nodes/fragment/17/node = SubResource("VisualShaderNodeTexture_uvn2w")
nodes/fragment/17/position = Vector2(1140, 240)
nodes/fragment/18/node = SubResource("VisualShaderNodeInput_r3105")
nodes/fragment/18/position = Vector2(560, 220)
nodes/fragment/19/node = SubResource("VisualShaderNodeUVFunc_qy3ae")
nodes/fragment/19/position = Vector2(600, 20)
nodes/fragment/20/node = SubResource("VisualShaderNodeFloatParameter_f4114")
nodes/fragment/20/position = Vector2(760, 1120)
nodes/fragment/21/node = SubResource("VisualShaderNodeFloatOp_jx64j")
nodes/fragment/21/position = Vector2(1220, 880)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 4, 0, 7, 0, 6, 0, 7, 1, 5, 0, 4, 1, 8, 0, 4, 2, 10, 0, 11, 1, 12, 0, 11, 0, 3, 0, 13, 0, 13, 3, 14, 0, 15, 0, 9, 0, 16, 0, 15, 0, 9, 0, 11, 2, 18, 0, 17, 2, 19, 0, 17, 0, 11, 0, 14, 1, 7, 0, 0, 0, 20, 0, 21, 1, 14, 0, 21, 0, 21, 0, 0, 1)
