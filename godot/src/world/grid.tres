[gd_resource type="VisualShader" load_steps=19 format=3 uid="uid://bb4x4cudbacjq"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_jmpox"]
parameter_name = "circle_size"
default_value_enabled = true
default_value = 0.2

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_iutbv"]
parameter_name = "circle_position"
default_value_enabled = true
default_value = Vector2(0.5, 0.5)

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_jgdq6"]
parameter_name = "alpha_value"
default_value_enabled = true
default_value = 0.8

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_fxp2p"]
operator = 2

[sub_resource type="Gradient" id="Gradient_3um1p"]
colors = PackedColorArray(0, 0, 0, 0, 1, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_6hitw"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_i43u1"]
seamless = true
color_ramp = SubResource("Gradient_3um1p")
noise = SubResource("FastNoiseLite_6hitw")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_uyydg"]
texture = SubResource("NoiseTexture2D_i43u1")

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_g31ug"]
parameter_name = "valid_placement"
default_value_enabled = true
default_value = true

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_idsy1"]
parameter_name = "invalid_color"
default_value_enabled = true
default_value = Color(0.997825, 0, 0.211122, 1)

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_27ame"]
parameter_name = "pixel_width"
default_value_enabled = true
default_value = 1280.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_1q73u"]
parameter_name = "pixel_height"
default_value_enabled = true
default_value = 760.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_i1bux"]
size = Vector2(780, 1000)
expression = "float uvPixelWidth = 1.0 / pixelWidth;
float uvPixelHeight = 1.0 / pixelHeight;
vec2 uvOutlineSize = vec2(uvPixelWidth * gridOutlineSize, uvPixelHeight * gridOutlineSize);
vec2 uvOutlineHalfSize = uvOutlineSize / 2.0;
float blockWidth = blockSize.x / pixelWidth;
float blockHeight = blockSize.y / pixelHeight;
float remainderWidth = mod(uv.x, blockWidth);
float remainderHeight = mod(uv.y, blockHeight);
vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);

//color = smoothstep(transparent, gridColor, vec4((uvOutlineHalfSize.x - remainderWidth) / uvOutlineHalfSize.x));
//color += smoothstep(transparent, gridColor, vec4((uvOutlineHalfSize.x - (blockWidth - remainderWidth)) / uvOutlineHalfSize.x));
//color += smoothstep(transparent, gridColor, vec4((uvOutlineHalfSize.y - remainderHeight) / uvOutlineHalfSize.y));
//color += smoothstep(transparent, gridColor, vec4((uvOutlineHalfSize.y - (blockHeight - remainderHeight)) / uvOutlineHalfSize.y));

float circle_distance = distance(uv, circlePosition);
vec4 calcColor = gridColor;
calcColor = mix(invalidColor, gridColor, vec4(clamp(float(valid) + circle_distance + circle_distance*4.0, 0.0, 1.0)));

color += calcColor * step(remainderWidth, uvOutlineSize.x);
color += calcColor * step((blockWidth - remainderWidth), uvOutlineSize.x);
color += calcColor * step(remainderHeight, uvOutlineSize.y);
color += calcColor * step((blockHeight - remainderHeight), uvOutlineSize.y);

color *= step(circle_distance, circleSize / 2.0);

color = mix(color, transparent, vec4(clamp(circle_distance + circle_distance * 3.0, 0.0, 1.0)));



color = clamp(color, transparent, gridColor);"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_w4m8s"]
parameter_name = "grid_color"
default_value_enabled = true
default_value = Color(0.899842, 0.36831, 0.646314, 1)

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_8cg4p"]
parameter_name = "block_size"
default_value_enabled = true
default_value = Vector2(8, 8)

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_goxmt"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_kuhr7"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_3t6tq"]
parameter_name = "grid_outline_size"
default_value_enabled = true
default_value = 1.0

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float pixel_width = 1280.0;
uniform float pixel_height = 760.0;
uniform vec4 grid_color : source_color = vec4(0.899842, 0.368310, 0.646314, 1.000000);
uniform vec2 block_size = vec2(8.000000, 8.000000);
uniform float grid_outline_size = 1.0;
uniform float circle_size = 0.20000000298023;
uniform vec2 circle_position = vec2(0.500000, 0.500000);
uniform sampler2D tex_frg_14;
uniform bool valid_placement = true;
uniform vec4 invalid_color : source_color = vec4(0.997825, 0.000000, 0.211122, 1.000000);
uniform float alpha_value = 0.80000001192093;



void fragment() {
// FloatParameter:2
	float n_out2p0 = pixel_width;


// FloatParameter:3
	float n_out3p0 = pixel_height;


// ColorParameter:5
	vec4 n_out5p0 = grid_color;


// Vector2Parameter:6
	vec2 n_out6p0 = block_size;


// Input:7
	vec2 n_out7p0 = UV;


// FloatParameter:9
	float n_out9p0 = grid_outline_size;


// FloatParameter:10
	float n_out10p0 = circle_size;


// Vector2Parameter:11
	vec2 n_out11p0 = circle_position;


// Texture2D:14
	vec4 n_out14p0 = texture(tex_frg_14, UV);


// BooleanParameter:15
	bool n_out15p0 = valid_placement;


// ColorParameter:16
	vec4 n_out16p0 = invalid_color;


	vec4 n_out4p0;
// Expression:4
	n_out4p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		float uvPixelWidth = 1.0 / n_out2p0;
		float uvPixelHeight = 1.0 / n_out3p0;
		vec2 uvOutlineSize = vec2(uvPixelWidth * n_out9p0, uvPixelHeight * n_out9p0);
		vec2 uvOutlineHalfSize = uvOutlineSize / 2.0;
		float blockWidth = n_out6p0.x / n_out2p0;
		float blockHeight = n_out6p0.y / n_out3p0;
		float remainderWidth = mod(n_out7p0.x, blockWidth);
		float remainderHeight = mod(n_out7p0.y, blockHeight);
		vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);
		
		//n_out4p0 = smoothstep(transparent, n_out5p0, vec4((uvOutlineHalfSize.x - remainderWidth) / uvOutlineHalfSize.x));
		//n_out4p0 += smoothstep(transparent, n_out5p0, vec4((uvOutlineHalfSize.x - (blockWidth - remainderWidth)) / uvOutlineHalfSize.x));
		//n_out4p0 += smoothstep(transparent, n_out5p0, vec4((uvOutlineHalfSize.y - remainderHeight) / uvOutlineHalfSize.y));
		//n_out4p0 += smoothstep(transparent, n_out5p0, vec4((uvOutlineHalfSize.y - (blockHeight - remainderHeight)) / uvOutlineHalfSize.y));
		
		float circle_distance = distance(n_out7p0, n_out11p0);
		vec4 calcColor = n_out5p0;
		calcColor = mix(n_out16p0, n_out5p0, vec4(clamp(float(n_out15p0) + circle_distance + circle_distance*4.0, 0.0, 1.0)));
		
		n_out4p0 += calcColor * step(remainderWidth, uvOutlineSize.x);
		n_out4p0 += calcColor * step((blockWidth - remainderWidth), uvOutlineSize.x);
		n_out4p0 += calcColor * step(remainderHeight, uvOutlineSize.y);
		n_out4p0 += calcColor * step((blockHeight - remainderHeight), uvOutlineSize.y);
		
		n_out4p0 *= step(circle_distance, n_out10p0 / 2.0);
		
		n_out4p0 = mix(n_out4p0, transparent, vec4(clamp(circle_distance + circle_distance * 3.0, 0.0, 1.0)));
		
		
		
		n_out4p0 = clamp(n_out4p0, transparent, n_out5p0);
	}


// VectorDecompose:8
	float n_out8p0 = n_out4p0.x;
	float n_out8p1 = n_out4p0.y;
	float n_out8p2 = n_out4p0.z;
	float n_out8p3 = n_out4p0.w;


// FloatParameter:12
	float n_out12p0 = alpha_value;


// FloatOp:13
	float n_out13p0 = n_out8p3 * n_out12p0;


// Output:0
	COLOR.rgb = vec3(n_out4p0.xyz);
	COLOR.a = n_out13p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(2460, 440)
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatParameter_27ame")
nodes/fragment/2/position = Vector2(-900, 40)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatParameter_1q73u")
nodes/fragment/3/position = Vector2(-900, 280)
nodes/fragment/4/node = SubResource("VisualShaderNodeExpression_i1bux")
nodes/fragment/4/position = Vector2(-320, 620)
nodes/fragment/4/size = Vector2(780, 1000)
nodes/fragment/4/input_ports = "0,0,pixelWidth;1,0,pixelHeight;2,5,gridColor;3,3,blockSize;4,3,uv;5,0,gridOutlineSize;6,0,circleSize;7,3,circlePosition;8,5,noiseColor;9,6,valid;10,5,invalidColor;"
nodes/fragment/4/output_ports = "0,5,color;"
nodes/fragment/4/expression = "float uvPixelWidth = 1.0 / pixelWidth;
float uvPixelHeight = 1.0 / pixelHeight;
vec2 uvOutlineSize = vec2(uvPixelWidth * gridOutlineSize, uvPixelHeight * gridOutlineSize);
vec2 uvOutlineHalfSize = uvOutlineSize / 2.0;
float blockWidth = blockSize.x / pixelWidth;
float blockHeight = blockSize.y / pixelHeight;
float remainderWidth = mod(uv.x, blockWidth);
float remainderHeight = mod(uv.y, blockHeight);
vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);

//color = smoothstep(transparent, gridColor, vec4((uvOutlineHalfSize.x - remainderWidth) / uvOutlineHalfSize.x));
//color += smoothstep(transparent, gridColor, vec4((uvOutlineHalfSize.x - (blockWidth - remainderWidth)) / uvOutlineHalfSize.x));
//color += smoothstep(transparent, gridColor, vec4((uvOutlineHalfSize.y - remainderHeight) / uvOutlineHalfSize.y));
//color += smoothstep(transparent, gridColor, vec4((uvOutlineHalfSize.y - (blockHeight - remainderHeight)) / uvOutlineHalfSize.y));

float circle_distance = distance(uv, circlePosition);
vec4 calcColor = gridColor;
calcColor = mix(invalidColor, gridColor, vec4(clamp(float(valid) + circle_distance + circle_distance*4.0, 0.0, 1.0)));

color += calcColor * step(remainderWidth, uvOutlineSize.x);
color += calcColor * step((blockWidth - remainderWidth), uvOutlineSize.x);
color += calcColor * step(remainderHeight, uvOutlineSize.y);
color += calcColor * step((blockHeight - remainderHeight), uvOutlineSize.y);

color *= step(circle_distance, circleSize / 2.0);

color = mix(color, transparent, vec4(clamp(circle_distance + circle_distance * 3.0, 0.0, 1.0)));



color = clamp(color, transparent, gridColor);"
nodes/fragment/5/node = SubResource("VisualShaderNodeColorParameter_w4m8s")
nodes/fragment/5/position = Vector2(-700, -220)
nodes/fragment/6/node = SubResource("VisualShaderNodeVec2Parameter_8cg4p")
nodes/fragment/6/position = Vector2(-1400, 480)
nodes/fragment/7/node = SubResource("VisualShaderNodeInput_goxmt")
nodes/fragment/7/position = Vector2(-1380, 760)
nodes/fragment/8/node = SubResource("VisualShaderNodeVectorDecompose_kuhr7")
nodes/fragment/8/position = Vector2(640, 460)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatParameter_3t6tq")
nodes/fragment/9/position = Vector2(-1073.84, 918.246)
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatParameter_jmpox")
nodes/fragment/10/position = Vector2(-1540, 1120)
nodes/fragment/11/node = SubResource("VisualShaderNodeVec2Parameter_iutbv")
nodes/fragment/11/position = Vector2(-1500, 1380)
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatParameter_jgdq6")
nodes/fragment/12/position = Vector2(1780, 1220)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatOp_fxp2p")
nodes/fragment/13/position = Vector2(2060, 860)
nodes/fragment/14/node = SubResource("VisualShaderNodeTexture_uyydg")
nodes/fragment/14/position = Vector2(-1523.52, 1793.69)
nodes/fragment/15/node = SubResource("VisualShaderNodeBooleanParameter_g31ug")
nodes/fragment/15/position = Vector2(-880, 1560)
nodes/fragment/16/node = SubResource("VisualShaderNodeColorParameter_idsy1")
nodes/fragment/16/position = Vector2(-820, 1340)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 0, 3, 0, 4, 1, 5, 0, 4, 2, 7, 0, 4, 4, 6, 0, 4, 3, 4, 0, 8, 0, 9, 0, 4, 5, 8, 3, 13, 0, 12, 0, 13, 1, 11, 0, 4, 7, 10, 0, 4, 6, 14, 0, 4, 8, 16, 0, 4, 10, 15, 0, 4, 9, 13, 0, 0, 1, 4, 0, 0, 0)
